import { Metadata } from 'next';
import { notFound } from 'next/navigation';
import Link from 'next/link';
import { Book, FileText, ChevronRight } from 'lucide-react';
import { createCaller } from '@/lib/trpc/server';
import { WikiGenerationButton } from '@/components/WikiGenerationButton';
import { DeleteWikiButton } from '@/components/wiki/DeleteWikiButton';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import RepoPageLayout from '@/components/layouts/RepoPageLayout';

interface WikiIndexProps {
  params: Promise<{
    owner: string;
    repo: string;
  }>;
  searchParams: Promise<{
    version?: string;
  }>;
}

// Generate metadata for SEO
export async function generateMetadata({ params }: WikiIndexProps): Promise<Metadata> {
  const { owner, repo } = await params;

  const title = `${owner}/${repo} Documentation Wiki`;
  const description = `Comprehensive documentation and API reference for ${owner}/${repo}, auto-generated by gh.gg`;

  return {
    title,
    description,
    keywords: [owner, repo, 'documentation', 'wiki', 'API reference', 'developer docs'],
    openGraph: {
      title,
      description,
      type: 'website',
      url: `https://github.gg/wiki/${owner}/${repo}`,
      siteName: 'gh.gg',
    },
    twitter: {
      card: 'summary_large_image',
      title,
      description,
    },
    robots: {
      index: true,
      follow: true,
    },
  };
}

export default async function WikiIndex({ params, searchParams }: WikiIndexProps) {
  const { owner, repo } = await params;
  const { version } = await searchParams;

  const caller = await createCaller();
  const toc = await caller.wiki.getWikiTableOfContents({
    owner,
    repo,
    version: version ? parseInt(version) : undefined,
  });

  if (!toc || toc.pages.length === 0) {
    return (
      <RepoPageLayout user={owner} repo={repo}>
        <div className="max-w-screen-xl w-full mx-auto px-4 py-8">
          <Card>
            <CardHeader>
              <div className="flex items-center justify-between">
                <div>
                  <CardTitle className="flex items-center gap-2">
                    <Book className="h-6 w-6 text-blue-600" />
                    Wiki Documentation
                  </CardTitle>
                  <CardDescription className="mt-2">
                    No wiki documentation exists for this repository yet.
                  </CardDescription>
                </div>
              </div>
            </CardHeader>
            <CardContent>
              <div className="text-center py-8">
                <WikiGenerationButton owner={owner} repo={repo} />
              </div>
            </CardContent>
          </Card>
        </div>
      </RepoPageLayout>
    );
  }

  return (
    <RepoPageLayout user={owner} repo={repo}>
      <div className="max-w-screen-xl w-full mx-auto px-4 py-8">
        <Card>
          <CardHeader>
            <div className="flex items-center justify-between">
              <div>
                <CardTitle className="flex items-center gap-2">
                  <Book className="h-6 w-6 text-blue-600" />
                  Wiki Documentation
                </CardTitle>
                <CardDescription className="mt-2">
                  {toc.pages.length} {toc.pages.length === 1 ? 'page' : 'pages'} available
                </CardDescription>
              </div>
              <div className="flex items-center gap-2">
                <WikiGenerationButton owner={owner} repo={repo} />
                <DeleteWikiButton owner={owner} repo={repo} />
              </div>
            </div>
          </CardHeader>
          <CardContent>
            <div className="space-y-2">
              {toc.pages.map((page) => (
                <Link
                  key={page.slug}
                  href={`/wiki/${owner}/${repo}/${page.slug}${version ? `?version=${version}` : ''}`}
                  className="flex items-center justify-between p-4 rounded-lg border hover:bg-accent transition-colors group"
                >
                  <div className="flex items-center gap-3">
                    <FileText className="h-5 w-5 text-muted-foreground group-hover:text-foreground" />
                    <div>
                      <h3 className="font-medium group-hover:text-primary">{page.title}</h3>
                      {page.summary && (
                        <p className="text-sm text-muted-foreground mt-1">{page.summary}</p>
                      )}
                    </div>
                  </div>
                  <ChevronRight className="h-5 w-5 text-muted-foreground group-hover:text-foreground" />
                </Link>
              ))}
            </div>
          </CardContent>
        </Card>
      </div>
    </RepoPageLayout>
  );
}
